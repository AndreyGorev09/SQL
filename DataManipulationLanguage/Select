/* SELECT - 3 ФУНДАМЕНТАЛЬНЫЕ КОНЦЕПЦИИ */

1. PROJECTION - ВЫБОР СТОЛБЦОВ ИЗ ТАБЛИЦЫ:
SELECT имя_столбца_1, имя_столбца_2, имя_столбца_3 и т.д. FROM имя_таблицы;

2. SELECTION - ВЫБОР СТРОК ИЗ ТАБЛИЦЫ:
SELECT * FROM имя_таблицы WHERE имя_столбца оператор_сравнения шаблон_сравнения;
НАПРИМЕР: SELECT * FROM users WHERE id = 1;

3. JOINING - ОБЪЕДИНЕНИЕ СТОЛБЦОВ;



/* 1. КОНЦЕПЦИЯ PROJECTION: */
/* SELECT statement (НЕ МЕНЯЕТ ДАННЫЕ, ТОЛЬКО ИЗВЛЕКАЕТ ИХ) BASE SYNTAX: */
1. SELECT *  FROM table;
2. SELECT column(s) FROM table;


/* DISTINCT - ВЫВОД УНИКАЛЬНЫХ ЗНАЧЕНИЙ СОЛБЦА(ОВ) ИЗ ТАБЛИЦЫ */
/* SELECT DISTINCT column(s) FROM table; - СИНТАКСИС ЗАПИСИ */

SHOW DATABASES;
CREATE DATABASE distinct_db;
USE distinct_db;
CREATE TABLE distinct_func (
    distinct_id int auto_increment primary key,
    employees_id int not null,
    start_date date not null,
    end_date date not null,
    job_id varchar(20) not null,
    departament_id int not null);

INSERT INTO distinct_func VALUES
    (null, 102, '2022-10-16', '2022-11-16', 'it prog', 60),
    (null, 101, '1997-09-21', '2001-10-27', 'ac account', 100),
    (null, 101, '2001-10-28', '2005-03-15', 'ac mrg', 110),
    (null, 201, '2004-02-17', '2007-12-19', 'mk rep', 20),
    (null, 114, '2006-03-24', '2007-12-31', 'st clerk', 50),
    (null, 122, '2007-01-01', '2007-12-31', 'st clerk', 50),
    (null, 200, '1995-09-17', '2001-06-17', 'ad asst', 90),
    (null, 176, '2006-03-24', '2006-12-31', 'sa rep', 80),
    (null, 176, '2007-01-01', '2007-12-31', 'man', 80),
    (null, 200, '2002-07-01', '2006-12-31', 'ac account', 90);

SELECT * FROM distinct_func;
SELECT job_id FROM distinct_func;
SELECT DISTINCT job_id FROM distinct_func;
SELECT DISTINCT job_id, departament_id FROM distinct_func;


/* EXPRESSION IN SELECT LIST - ВЫРОЖЕНИЯ В SELECT LIST */
/* SELECT column(s), expression(s) FROM table; - СИНТАКСИС SELECT EXPRESSION */


/* TYPE INTEGER ПОДДЕРЖИВАЕТ ОПЕРАЦИИ:  +, -, *, /, () */
SELECT employees_id, employees_id*2 FROM distinct_func;
SELECT employees_id, departament_id, employees_id*2+departament_id FROM distinct_func;
SELECT job_id, employees_id, employees_id*1.5 FROM distinct_func;

/* TYPE VARCHAR ПОДДЕРЖИВАЕТ ОПЕРАЦИИ:  CONCAT,  */

ALTER TABLE distinct_func (
ADD COLUMN first_name TEXT NOT NULL,
ADD COLUMN last_name TEXT NOT NULL);

UPDATE dictinct_func SET first_name = 'andrey', last_name = 'gorev' WHERE disinct_id = 1;
UPDATE distinct_func SET first_name = 'petr', last_name = 'radko' WHERE disinct_id = 2;
UPDATE distinct_func SET first_name = 'misha', last_name = 'nemo' WHERE disinct_id = 3;
UPDATE distinct_func SET first_name = 'toly', last_name = 'esmus' WHERE disinct_id = 4;
UPDATE distinct_func SET first_name = 'kirill', last_name = 'tor' WHERE disinct_id = 5;
UPDATE distinct_func SET first_name = 'viktor', last_name = 'car' WHERE disinct_id = 6;
UPDATE distinct_func SET first_name = 'nikita', last_name = 'leo' WHERE disinct_id = 7;
UPDATE distinct_func SET first_name = 'ivan', last_name = 'ferma' WHERE disinct_id = 8;
UPDATE distinct_func SET first_name = 'evgen', last_name = 'messing' WHERE disinct_id = 9;
UPDATE distinct_func SET first_name = 'garik', last_name = 'lipskii' WHERE disinct_id = 10;
UPDATE distinct_func SET first_name = 'pavel', last_name = 'chig' WHERE disinct_id = 11;
UPDATE distinct_func SET first_name = 'hugo', last_name = 'porto' WHERE disinct_id = 12;
UPDATE distinct_func SET first_name = 'fill', last_name = 'kastro' WHERE disinct_id = 13;

SELECT CONCAT(first_name, last_name) FROM distinct_func;
SELECT CONCAT(first_name, employees_id) FROM distinct_func;
SELECT CONCAT('my name is ', first_name, ', my last name ', last_name) FROM distinct_func;


/* ALIAS - ЭТО АЛЬТЕРНАТИВНОЕ ИМЯ ДЛЯ СТОЛБЦА ИЛИ ЦЕЛОГО ВЫРОЖЕНИЯ */
SELECT first_name, last_name, CONCAT(my last name ', last_name) AS expresion FROM distinct_func;
ИЛИ
SELECT first_name, last_name, CONCAT(my last name ', last_name) expresion FROM distinct_func;

SELECT first_name, last_name, CONCAT(my last name ', last_name) AS 'my expresion' FROM distinct_func;
ИЛИ
SELECT first_name, last_name, CONCAT(my last name ', last_name) "my expresion" FROM distinct_func;


/* ТАБЛИЦА MY_DUAL ДЛЯ ВЫВОДА ТЕСТОВЫХ EXPRESSIONS */
CREATE TABLE my_dual (dummy VARCHAR(1));
INSERT INTO my_dual VALUES ('X');
SELECT CONCAT('ABC', 'XYZ', (30*90)) FROM my_dual;
SELECT CONCAT('PRIVET', ', MY NAME IS ANDREY!') AS greeting FROM my_dual;
SELECT CONCAT(36*365*24*60*60) AS 'moy vozrost v sekundax' FROM my_dual;


/* ЭКРАНИРОВАНИЕ В ТЕКСТОВЫХ ВЫРОЖЕНИЯХ */
SELECT 'It''s my life' FROM my_dual;
SELECT "It's my life" FROM my_dual;



/* 2. КОНЦЕПЦИЯ SELECTION: */
SELECT column(s) FROM table WHERE condition(s)-условие;

/* ОПЕРАТОР СРАВНЕНИЯ: =, >, <, >=, <=, <> OR AND != */

SELECT first_name, last_name FROM distinct_func WHERE id = 1;
SELECT first_name, last_name, job_id FROM distinct_func WHERE employees_id = 102;
SELECT * FROM distinct_func WHERE first_name = 'andrey';
SELECT first_name, last_name, job_id FROM distinct_func WHERE employees_id = 100+2;
SELECT * FROM distinct_func WHERE employees_id >= distinct_id + 100;
SELECT * FROM distinct_func WHERE end_date = '2022-11-16';


/* ОПЕРАТОР BETWEEN */
SELECT * FROM distinct_func WHERE employees_id BETWEEN 150 AND 200;
SELECT * FROM dictinct_func WHERE first_name BETWEEN 'a' and 'z';

/* ОПЕРАТОР IN */
SELECT * FROM dictinct_func WHERE distinct_id IN (1, 2, 3);
SELECT * FROM distinct_func WHERE first_name in ('andrey', 'petr', 'misha');

/* ОПЕРАТОР IS NULL */
ALTER TABLE distinct_func (ADD COLUMN is_null TEXT NULL);
UPDATE dictinct_func SET is_null = 'THIS IS NOT NULL' WHERE distinct_id IN (1,3,5,7,9,10,11);
SELECT * FROM dictinct_func WHERE is_null IS NULL;

/* ОПЕРАТОР LIKE: % - ЛЮБАЯ ПОСЛЕДОВАТЕЛЬНОСТЬ ЛЮБЫХ СИМВОЛОВ И _ - ЛЮБОЙ ОДИН СИМВОЛ; */
SELECT * FROM distinct_func;
SELECT * FROM dictinct_func WHERE first_name LIKE '%y';
SELECT * FROM dictinct_func WHERE first_name LIKE '%e%';
SELECT * FROM dictinct_func WHERE first_name LIKE 'e%';
SELECT * FROM dictinct_func WHERE first_name LIKE '_i%';
SELECT * FROM dictinct_func WHERE first_name LIKE '__k%';
SELECT * FROM dictinct_func WHERE first_name LIKE '%t%';

/* ИСПОЛЬЗОВАНИЯ LIKE СО СПЕЦИАЛЬНЫМИ СИМВОЛАМИ % И _ */
SELECT * FROM dictinct_func WHERE first_name LIKE 'e!%%' ESCAPE '!';
SELECT * FROM dictinct_func WHERE first_name LIKE 'e!_%' ESCAPE '!';

/* ОПЕРАТОР ORDER BY */
SELECT * | {DISTINCT column(s) alias, expression(s) alias} 
FROM table
WHERE condision(s)
ORDER BY {col(s)| exp(s)| numeric position column in table} {ASC|DESC} {NULLS FIRST|LAST};

SELECT * FROM distict_func WHERE is_null IS NULL ORDER BY distinct_id DESC; /* СОРТИРОВКА ОТ БОЛЬШЕГО К МЕНЬШЕМУ */
SELECT * FROM distinct_func WHERE is_null IS NULL ORDER BY distinct_id ASC; /* СОРТИРОВКА ОТ МЕНЬШЕГО К БОЛЬШЕМУ */

SELECT * FROM distict_func ORDER BY 2; /* СОРТИРОВКА ПО ПОРЯДКОВОМУ НОМЕРУ КОЛОНКИ В ТАБЛИЦЕ */


/* CHARACTER FUNCTION CASE CONVERTION FUNCTION (МОЖНО ИСПОЛЬЗОВАТЬ И ЗНАЧЕНИЯ И СТОЛБЦЫ И ВЫРОЖЕНИЯ)*/

/* ФУНКЦИЯ LOWER(s), s - sting которую нужно перевести в нижний регистор */
SELECT * FROM distinct_func;
SELECT LOWER(first_name), last_name from dictinct_func;
SELECT LOWER('HELLO WORLD') FROM dictinct_func WHERE distinct_id = 1;
SELECT * FROM dictinct_func WHERE LOWER(first_name) = 'kirill';

/* ФУНКЦИЯ UPPER(s), s - sting которую нужно перевести в верхний регистор */
SELECT ('hello world') from distinct_func where distinct_db = 1;
SELECT UPPER(first_name), UPPER(last_name) FROM distinct_func;

/* ФУНКЦИЯ INITCAP(s), s - sting в которой первая буква делается заглавной остальные прописными */
SELECT INITCAP(first_name), INITCAP(last_name) from dictinct_func;
SELECT('hello world') from distict_func where disinct_id = 1;


/* CHARACTER MANIPULATIONS FUNCTIONS  */

/* ФУНКЦИЯ CONCAT(s) - ОБЪЕДИНЯЕТ СТРОКИ В ОДНУ СТРОКУ */
SELECT CONCAT(first_name, last_name) FROM distinct_func;
SELECT CONCAT(first_name, employees_id) FROM distinct_func;
SELECT CONCAT('my name is ', first_name, ', my last name ', last_name) FROM distinct_func;

/* ФУНКЦИЯ LENGHT(s) - ВЫЧЕСЛЯЕТ ДЛИНУ СТРОКИ */
SELECT LENGTH('hello world') from distict_func where disinct_id = 1;
SELECT * FROM dictinct_func WHERE LENGTH(first_name) > 5;

/* ФУНКЦИЯ LPAD(s,n,p)- ДОБАВЛЕНИЕ СИМВОЛОВ СЛЕВО И RPAD(s,n,p)- ДОБАВЛЕНИЕ СИМВОЛОВ СПРАВА - ГДЕ s-СТРОКА, ТЕКСТ n-КОНЕЧНАЯ ДЛИНА ТЕКСТА p-СИМВОЛ ИЛИ ТЕКСТ ДЛЯ ЗАПОЛНЕНИЯ */
SELECT RPAD(first_name, 10, '$') FROM dictinct_func;
SELECT LPAD(first_name, 10, '$') FROM dictinct_func;
SELECT RPAD('HELLO WORLD', 15, '#') FROM dictinct_func;
SELECT LPAD('HELLO WORLD', 15, '#') FROM dictinct_func;

/* ФУНКЦИЯ TRIM - УДАЛАЯЕТ СИМВОЛЫ ИЗ ТЕКСТА */
SELECT TRIM(trailing '#' from 'andrey######') FROM distict_func WHERE distinct_id = 1; /* УДАЛЯЕТ СИМВОЛЫ В КОНЦЕ ТЕКСТА */
SELECT TRIM(leading '#' from '###########andrey') FROM distict_func WHERE distinct_id = 1; /* УДАЛЯЕТ СИМВОЛЫ В НАЧАЛЕ ТЕКСТА */
SELECT TRIM(both '#' from '#################andrey######') FROM distict_func WHERE distinct_id = 1; /* УДАЛЯЕТ СИМВОЛЫ С ОБОИХ СТОРОН ТЕКСТА */

/* ФУНКЦИЯ INSTR(s, search string) - НАХОДИТ ПОЗИЦИЮ ИСКОМОЙ СТРОКИ, ГДЕ s- СТРОКА, ТЕКСТ, search string - ИСКОМЫЙ ТЕКСТ */
SELECT INTSTR(first_name, 'e') from dictinct_func where distinct_id = 1;

/* ФУНКЦИЯ SUBSTR(s, search string) - ВЫВОДИТ ТЕКСТ ИСКОМОЙ ПОЗИЦИИ, ГДЕ s- СТРОКА, ТЕКСТ, search posision - ПОЗИЦИЯ С КОТОРОЙ БУДЕТ ВЫВОДИТЬСЯ ТЕКСТ ПОДСТРОКИ */
SELECT INTSTR(first_name, 3) from dictinct_func where distinct_id = 1;

/* REPLACE(s, search item, repleasment item) - МЕНЯЕТ ЭЛЕМЕНТЫ В СТРОКЕ, ГДЕ s - СТРОКА В КОТОРОЙ БУДЕМ ЗАМЕНЯТЬ , search item - ИСКОМЫЙ ЭЛЕМЕНТ , ЧТО ХОТИМ ЗАМЕНИТЬ, repleasment item - ЗАМЕНЯЮЩИЙ ЭЛЕМЕНТ, НА ЧТО ХОТИМ ЗАМЕНИТЬ */
SELECT REPLACE(first_name, 'a', 'e') from dictinct_func where distinct_id = 1;


/* NUMERIC FUNCTIONS */

/* ФУНКЦИЯ ROUND (n, precision) - ГДЕ s- ЧИСЛО, precision- ТОЧНОСТЬ;  - ОКРУГЛЯЕТ ЧИСЛО ДО УКАЗАННОЙ ТОЧНОСТИ */
SELECT ROUND(3.14) FROM my_dual;
SELECT ROUND(3.5678, 2) FROM my_dual;
SELECT ROUND(departament_id/3, 2) FROM dictinct_func;

/* ФУНКЦИЯ TRUNC (n, precision) - ГДЕ s- ЧИСЛО, precision- ТОЧНОСТЬ;  - ОТСИКАЕТ ОСТАТОК ДО УКАЗАННОЙ ТОЧНОСТИ */
SELECT TRUNC(3.14) FROM my_dual;
SELECT TRUNC(3.5678, 2) FROM my_dual;
SELECT TRUNC(departament_id/3, 2) FROM dictinct_func;

/* ФУНКЦИЯ MOD(devident, devisor) - ГДЕ devident- ДЕЛИМОЕ, devisor- ДЕЛИТЕЛЬ; - ОСТАТОК ОТ ДЕЛЕНИЯ */
SELECT MOD(10, 2) FROM my_dual;
SELECT MOD(9, 2) FROM my_dual;
SELECT MOD(departament_id, 3) FROM dictinct_func WHERE departament_id = 3;


/* DATE FUNCTION */
/* ФУНКЦИЯ SYSDATE() - ВЫВОДИТ ТЕКУЩУЮ ДАТУ И ВРЕМЯ */
SELECT SYSDATE() FROM my_dual;
/* MONTHS_BETWEEN(start_date, end_date) - ГДЕ start_date- С КАКОГО МЕСЯЦА , end_date- ПО КАКОЙ МЕСЯЦ; - ВЫВОДИТ КОЛИЧЕСТВО МЕСЯЦЕВ */


/* NULL FUNCTIONS */
/* NVL(value, ifnull) - ГДЕ value- , ifnull-; ПРОВЕРЯЕТ И ВОЗВРАЩАЕТ ЗНАЧЕНИЕ КОТОРОЕ НЕ ЯВЛЯЕТСЯ NULL*/


/* CONDISION FUMCTIONS  46 УРОК */



